//* grab header element div by id "currentDay", assign to variable 'currentDayEl' and set equal to value of 'today'
//* use dayjs format to get local date, time, and hour and set equal to variable 'today'
//* display local date, time, hour in header element (to let user know data is current and for later use in container)
var currentDayEl = document.getElementById('currentDay');
currentDayEl.textContent = today;
var today = dayjs();
$('#currentDay').text(today.format('MMM D, YYYY'));

//** use dayjs format to get time in 'hour:minutes AM/PM' format for display in header div */
var time = dayjs().format('h:mm A');
var timeEl = document.createElement('p');
timeEl.textContent = time;
currentDayEl.append(timeEl);

var hour = dayjs().format('H');
var hourEl = document.createElement('p');
hourEl.textContent = hour;

//** grab container div and set equal to variable (in order to append nested divs for each hour of the day 'i' populated by for loop */
containerDiv = document.getElementById('addRows');


//if (hour === hour + 1) {
for (i = 9; i < 17; i++) {

    //* generate a <div> element representing a time-block ('hourDiv') row for each hour of the day 'i' in for loop (9 to 17 ==> 9am- 4pm)
    //* set div 'data-hour' and 'class' attributes to variable 'hourDiv'
    //* append each (.)nested time-block div ("row") to ()parent container div
    var hourDiv = document.createElement('div');
    rowHourAttr = dayjs().hour(i).format('H');
    hourDiv.setAttribute('data-hour', rowHourAttr);
    hourDiv.setAttribute('class', 'row');
    containerDiv.appendChild(hourDiv);

    //* create a <div> element [nested grandchild of containerDiv and child of time-block after appending to each time-block div in same row] 
    //* set nested div 'class' attribute (e.g. grid format to left) to representative variable
    //* set text of each nested div to local hour "i" using dayjs format of each time-block div
    //* append (..)nested div elements to each (.)time-block div (functioning as local container)
    var divInHourDiv = document.createElement('div');
    divInHourDiv.setAttribute('class', 'col-2 col-md-1 hour text-center py-3');
    divInHourDiv.textContent = dayjs().hour(i).format('h A');
    hourDiv.appendChild(divInHourDiv);

    //* create a <textarea> element [nested grandchild of container div and child of time-block after appending to each time-block div in same row] 
    //* set nested textarea 'class', 'rows', and 'data-index' attributes (e.g. data-index = i to associate text with row generated by loop) to representative variable
    //* append (..)nested textarea element to each (.)time-block div
    var textAreaNew = document.createElement('textarea');
    textAreaNew.setAttribute('class', 'col-8 col-md-10 description');
    textAreaNew.setAttribute('rows', '3');
    textAreaNew.setAttribute('data-index', i);
    hourDiv.appendChild(textAreaNew);

    //* create <button> element [nested grandchild of container div and child of time-block div after appending to each time-block div in same row]
    //* set nested button 'class', 'aria-label', and 'data-index' attributes (e.g. data-index = i to associate text with row generated by loop) to representative variable
    //* append (..)nested button element to each (.)time-block div
    var buttonSave = document.createElement('button');
    buttonSave.setAttribute('class', 'btn saveBtn col-2 col-md-1');
    buttonSave.setAttribute('aria-label', 'save');
    buttonSave.setAttribute('data-index', i);

    //* create <i> or "icon" element [nested grand-grandchild of container div, grandchild of time-block div, and child of button element after appending to each parent button element]
    //* set nested icon 'class' and 'aria-hidden' attributes to representative variable
    //* append (...)nested icon element to each (..)button element in each (.)time-block div
    var iClass = document.createElement('i');
    iClass.setAttribute('class', 'fas fa-save');
    iClass.setAttribute('aria-hidden', 'true');
    buttonSave.appendChild(iClass);
    hourDiv.appendChild(buttonSave);

    //* grab each time-block div (hourDiv) by class and set equal to variable ('rows')
    //* for each of the 'rows': 1) grab the 'rowHourAttr's value based on '(i)', representing hour of time-block row and 2) set equal to var 'rowHour'
    //* assign time-frame classes to each of the 'rows' based on if it is before, during, or after current dayjs-generated time ('hour')
    var rows = $('.row');
    rows.each(function () {
        var rowHour = parseInt($(this).attr('data-hour'));
        if (rowHour < hour) {
            $(this).addClass('past');
        }
        if (rowHour == hour) {
            $(this).addClass('present');
        }
        if (rowHour > hour) {
            //if rowHour > 10
            $(this).addClass('future');
        }
    });
}

//* when day changes, create a new row div

// Wrap all code that interacts with the DOM in a call to jQuery to ensure that
// the code isn't run until the browser has finished rendering all the elements
// in the html.
//* get the value of textarea inputs by class and assign to variable 'value'
//* get the data-index value of textarea inputs by class and assign to variable 'key'
//* store value of 'key' and 'value' locally
function seeLocalValue() {
    let value = $(this).siblings('.description').val();
    let key = $(this).siblings('.description').data('index');
    localStorage.setItem(key, value);
}

//* create variables to grab textArea
//* select all buttons by class and assign to variable 'saveBtns'
//* for each of the saveBtns populated by for loop, add an event listener to wait for click event that calls 'seeLocalValue' function (to save textarea upon click)
let saveBtns = document.querySelectorAll('.saveBtn');
saveBtns.forEach(function (btn) {
    btn.addEventListener('click', seeLocalValue);
});

//* retrieve n input textarea values from local storage 
//* select each textarea input element by custom data-hour attribute of time-block divs (i ~ n) from hour 9 to 17 and set text equal to the second child (i=1) element's input
function renderSavedTextArea() {
    let n = 9;

    while (n < 17) {
        let value = localStorage.getItem(n);
        document.querySelector(`[data-hour="${n}"]`).children[1].textContent =
            value;
        n++;
    }
}

//* called upon initialization to display stored textarea input ('value' and 'key')
function init() {
    renderSavedTextArea();
}

init();